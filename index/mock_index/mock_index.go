// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/anytypeio/any-sync-filenode/index (interfaces: Index)

// Package mock_index is a generated GoMock package.
package mock_index

import (
	context "context"
	reflect "reflect"

	index "github.com/anytypeio/any-sync-filenode/index"
	app "github.com/anytypeio/any-sync/app"
	gomock "github.com/golang/mock/gomock"
	cid "github.com/ipfs/go-cid"
	blocks "github.com/ipfs/go-libipfs/blocks"
)

// MockIndex is a mock of Index interface.
type MockIndex struct {
	ctrl     *gomock.Controller
	recorder *MockIndexMockRecorder
}

// MockIndexMockRecorder is the mock recorder for MockIndex.
type MockIndexMockRecorder struct {
	mock *MockIndex
}

// NewMockIndex creates a new mock instance.
func NewMockIndex(ctrl *gomock.Controller) *MockIndex {
	mock := &MockIndex{ctrl: ctrl}
	mock.recorder = &MockIndexMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIndex) EXPECT() *MockIndexMockRecorder {
	return m.recorder
}

// Bind mocks base method.
func (m *MockIndex) Bind(arg0 context.Context, arg1, arg2 string, arg3 []blocks.Block) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Bind", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// Bind indicates an expected call of Bind.
func (mr *MockIndexMockRecorder) Bind(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Bind", reflect.TypeOf((*MockIndex)(nil).Bind), arg0, arg1, arg2, arg3)
}

// BindCids mocks base method.
func (m *MockIndex) BindCids(arg0 context.Context, arg1, arg2 string, arg3 []cid.Cid) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BindCids", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// BindCids indicates an expected call of BindCids.
func (mr *MockIndexMockRecorder) BindCids(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BindCids", reflect.TypeOf((*MockIndex)(nil).BindCids), arg0, arg1, arg2, arg3)
}

// Exists mocks base method.
func (m *MockIndex) Exists(arg0 context.Context, arg1 cid.Cid) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Exists", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Exists indicates an expected call of Exists.
func (mr *MockIndexMockRecorder) Exists(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exists", reflect.TypeOf((*MockIndex)(nil).Exists), arg0, arg1)
}

// ExistsInSpace mocks base method.
func (m *MockIndex) ExistsInSpace(arg0 context.Context, arg1 string, arg2 []cid.Cid) ([]cid.Cid, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExistsInSpace", arg0, arg1, arg2)
	ret0, _ := ret[0].([]cid.Cid)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExistsInSpace indicates an expected call of ExistsInSpace.
func (mr *MockIndexMockRecorder) ExistsInSpace(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExistsInSpace", reflect.TypeOf((*MockIndex)(nil).ExistsInSpace), arg0, arg1, arg2)
}

// FileInfo mocks base method.
func (m *MockIndex) FileInfo(arg0 context.Context, arg1, arg2 string) (index.FileInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FileInfo", arg0, arg1, arg2)
	ret0, _ := ret[0].(index.FileInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FileInfo indicates an expected call of FileInfo.
func (mr *MockIndexMockRecorder) FileInfo(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FileInfo", reflect.TypeOf((*MockIndex)(nil).FileInfo), arg0, arg1, arg2)
}

// GetNonExistentBlocks mocks base method.
func (m *MockIndex) GetNonExistentBlocks(arg0 context.Context, arg1 []blocks.Block) ([]blocks.Block, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNonExistentBlocks", arg0, arg1)
	ret0, _ := ret[0].([]blocks.Block)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNonExistentBlocks indicates an expected call of GetNonExistentBlocks.
func (mr *MockIndexMockRecorder) GetNonExistentBlocks(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNonExistentBlocks", reflect.TypeOf((*MockIndex)(nil).GetNonExistentBlocks), arg0, arg1)
}

// Init mocks base method.
func (m *MockIndex) Init(arg0 *app.App) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Init", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Init indicates an expected call of Init.
func (mr *MockIndexMockRecorder) Init(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Init", reflect.TypeOf((*MockIndex)(nil).Init), arg0)
}

// IsAllExists mocks base method.
func (m *MockIndex) IsAllExists(arg0 context.Context, arg1 []cid.Cid) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsAllExists", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsAllExists indicates an expected call of IsAllExists.
func (mr *MockIndexMockRecorder) IsAllExists(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsAllExists", reflect.TypeOf((*MockIndex)(nil).IsAllExists), arg0, arg1)
}

// Lock mocks base method.
func (m *MockIndex) Lock(arg0 context.Context, arg1 []cid.Cid) (func(), error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Lock", arg0, arg1)
	ret0, _ := ret[0].(func())
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Lock indicates an expected call of Lock.
func (mr *MockIndexMockRecorder) Lock(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Lock", reflect.TypeOf((*MockIndex)(nil).Lock), arg0, arg1)
}

// Name mocks base method.
func (m *MockIndex) Name() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name.
func (mr *MockIndexMockRecorder) Name() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockIndex)(nil).Name))
}

// SpaceInfo mocks base method.
func (m *MockIndex) SpaceInfo(arg0 context.Context, arg1 string) (index.SpaceInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SpaceInfo", arg0, arg1)
	ret0, _ := ret[0].(index.SpaceInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SpaceInfo indicates an expected call of SpaceInfo.
func (mr *MockIndexMockRecorder) SpaceInfo(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SpaceInfo", reflect.TypeOf((*MockIndex)(nil).SpaceInfo), arg0, arg1)
}

// SpaceSize mocks base method.
func (m *MockIndex) SpaceSize(arg0 context.Context, arg1 string) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SpaceSize", arg0, arg1)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SpaceSize indicates an expected call of SpaceSize.
func (mr *MockIndexMockRecorder) SpaceSize(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SpaceSize", reflect.TypeOf((*MockIndex)(nil).SpaceSize), arg0, arg1)
}

// UnBind mocks base method.
func (m *MockIndex) UnBind(arg0 context.Context, arg1, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnBind", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// UnBind indicates an expected call of UnBind.
func (mr *MockIndexMockRecorder) UnBind(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnBind", reflect.TypeOf((*MockIndex)(nil).UnBind), arg0, arg1, arg2)
}
