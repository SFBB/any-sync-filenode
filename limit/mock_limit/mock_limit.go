// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/anyproto/any-sync-filenode/limit (interfaces: Limit)
//
// Generated by this command:
//
//	mockgen -destination mock_limit/mock_limit.go github.com/anyproto/any-sync-filenode/limit Limit
//
// Package mock_limit is a generated GoMock package.
package mock_limit

import (
	context "context"
	reflect "reflect"

	app "github.com/anyproto/any-sync/app"
	gomock "go.uber.org/mock/gomock"
)

// MockLimit is a mock of Limit interface.
type MockLimit struct {
	ctrl     *gomock.Controller
	recorder *MockLimitMockRecorder
}

// MockLimitMockRecorder is the mock recorder for MockLimit.
type MockLimitMockRecorder struct {
	mock *MockLimit
}

// NewMockLimit creates a new mock instance.
func NewMockLimit(ctrl *gomock.Controller) *MockLimit {
	mock := &MockLimit{ctrl: ctrl}
	mock.recorder = &MockLimitMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLimit) EXPECT() *MockLimitMockRecorder {
	return m.recorder
}

// Check mocks base method.
func (m *MockLimit) Check(arg0 context.Context, arg1 string) (uint64, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Check", arg0, arg1)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Check indicates an expected call of Check.
func (mr *MockLimitMockRecorder) Check(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Check", reflect.TypeOf((*MockLimit)(nil).Check), arg0, arg1)
}

// Close mocks base method.
func (m *MockLimit) Close(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockLimitMockRecorder) Close(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockLimit)(nil).Close), arg0)
}

// Init mocks base method.
func (m *MockLimit) Init(arg0 *app.App) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Init", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Init indicates an expected call of Init.
func (mr *MockLimitMockRecorder) Init(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Init", reflect.TypeOf((*MockLimit)(nil).Init), arg0)
}

// Name mocks base method.
func (m *MockLimit) Name() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name.
func (mr *MockLimitMockRecorder) Name() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockLimit)(nil).Name))
}

// Run mocks base method.
func (m *MockLimit) Run(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Run", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Run indicates an expected call of Run.
func (mr *MockLimitMockRecorder) Run(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Run", reflect.TypeOf((*MockLimit)(nil).Run), arg0)
}
