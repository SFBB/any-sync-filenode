// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/anytypeio/any-sync-filenode/serverstore (interfaces: Service,ServerStore)

// Package mock_serverstore is a generated GoMock package.
package mock_serverstore

import (
	context "context"
	reflect "reflect"

	app "github.com/anytypeio/any-sync/app"
	fileproto "github.com/anytypeio/any-sync/commonfile/fileproto"
	gomock "github.com/golang/mock/gomock"
	cid "github.com/ipfs/go-cid"
	blocks "github.com/ipfs/go-libipfs/blocks"
)

// MockService is a mock of Service interface.
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
}

// MockServiceMockRecorder is the mock recorder for MockService.
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance.
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *MockService) Add(arg0 context.Context, arg1 []blocks.Block) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Add", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Add indicates an expected call of Add.
func (mr *MockServiceMockRecorder) Add(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockService)(nil).Add), arg0, arg1)
}

// BlocksBind mocks base method.
func (m *MockService) BlocksBind(arg0 context.Context, arg1 string, arg2 ...cid.Cid) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "BlocksBind", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// BlocksBind indicates an expected call of BlocksBind.
func (mr *MockServiceMockRecorder) BlocksBind(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BlocksBind", reflect.TypeOf((*MockService)(nil).BlocksBind), varargs...)
}

// Check mocks base method.
func (m *MockService) Check(arg0 context.Context, arg1 string, arg2 ...cid.Cid) ([]*fileproto.BlockAvailability, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Check", varargs...)
	ret0, _ := ret[0].([]*fileproto.BlockAvailability)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Check indicates an expected call of Check.
func (mr *MockServiceMockRecorder) Check(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Check", reflect.TypeOf((*MockService)(nil).Check), varargs...)
}

// Delete mocks base method.
func (m *MockService) Delete(arg0 context.Context, arg1 cid.Cid) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockServiceMockRecorder) Delete(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockService)(nil).Delete), arg0, arg1)
}

// Get mocks base method.
func (m *MockService) Get(arg0 context.Context, arg1 cid.Cid) (blocks.Block, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1)
	ret0, _ := ret[0].(blocks.Block)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockServiceMockRecorder) Get(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockService)(nil).Get), arg0, arg1)
}

// GetMany mocks base method.
func (m *MockService) GetMany(arg0 context.Context, arg1 []cid.Cid) <-chan blocks.Block {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMany", arg0, arg1)
	ret0, _ := ret[0].(<-chan blocks.Block)
	return ret0
}

// GetMany indicates an expected call of GetMany.
func (mr *MockServiceMockRecorder) GetMany(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMany", reflect.TypeOf((*MockService)(nil).GetMany), arg0, arg1)
}

// Init mocks base method.
func (m *MockService) Init(arg0 *app.App) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Init", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Init indicates an expected call of Init.
func (mr *MockServiceMockRecorder) Init(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Init", reflect.TypeOf((*MockService)(nil).Init), arg0)
}

// Name mocks base method.
func (m *MockService) Name() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name.
func (mr *MockServiceMockRecorder) Name() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockService)(nil).Name))
}

// MockServerStore is a mock of ServerStore interface.
type MockServerStore struct {
	ctrl     *gomock.Controller
	recorder *MockServerStoreMockRecorder
}

// MockServerStoreMockRecorder is the mock recorder for MockServerStore.
type MockServerStoreMockRecorder struct {
	mock *MockServerStore
}

// NewMockServerStore creates a new mock instance.
func NewMockServerStore(ctrl *gomock.Controller) *MockServerStore {
	mock := &MockServerStore{ctrl: ctrl}
	mock.recorder = &MockServerStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockServerStore) EXPECT() *MockServerStoreMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *MockServerStore) Add(arg0 context.Context, arg1 []blocks.Block) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Add", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Add indicates an expected call of Add.
func (mr *MockServerStoreMockRecorder) Add(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockServerStore)(nil).Add), arg0, arg1)
}

// Delete mocks base method.
func (m *MockServerStore) Delete(arg0 context.Context, arg1 cid.Cid) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockServerStoreMockRecorder) Delete(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockServerStore)(nil).Delete), arg0, arg1)
}

// DeleteMany mocks base method.
func (m *MockServerStore) DeleteMany(arg0 context.Context, arg1 []cid.Cid) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteMany", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteMany indicates an expected call of DeleteMany.
func (mr *MockServerStoreMockRecorder) DeleteMany(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMany", reflect.TypeOf((*MockServerStore)(nil).DeleteMany), arg0, arg1)
}

// Get mocks base method.
func (m *MockServerStore) Get(arg0 context.Context, arg1 cid.Cid) (blocks.Block, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1)
	ret0, _ := ret[0].(blocks.Block)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockServerStoreMockRecorder) Get(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockServerStore)(nil).Get), arg0, arg1)
}

// GetMany mocks base method.
func (m *MockServerStore) GetMany(arg0 context.Context, arg1 []cid.Cid) <-chan blocks.Block {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMany", arg0, arg1)
	ret0, _ := ret[0].(<-chan blocks.Block)
	return ret0
}

// GetMany indicates an expected call of GetMany.
func (mr *MockServerStoreMockRecorder) GetMany(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMany", reflect.TypeOf((*MockServerStore)(nil).GetMany), arg0, arg1)
}

// Init mocks base method.
func (m *MockServerStore) Init(arg0 *app.App) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Init", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Init indicates an expected call of Init.
func (mr *MockServerStoreMockRecorder) Init(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Init", reflect.TypeOf((*MockServerStore)(nil).Init), arg0)
}

// Name mocks base method.
func (m *MockServerStore) Name() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name.
func (mr *MockServerStoreMockRecorder) Name() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockServerStore)(nil).Name))
}
